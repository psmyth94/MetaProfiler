// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// curve_fitting_c
arma::mat curve_fitting_c(const std::vector<arma::colvec>& xr, const std::vector<arma::colvec>& yr, const arma::colvec& minbound, const arma::colvec& maxbound, const int equation, const Rcpp::List& control, bool verbose);
RcppExport SEXP _MetaProfiler_curve_fitting_c(SEXP xrSEXP, SEXP yrSEXP, SEXP minboundSEXP, SEXP maxboundSEXP, SEXP equationSEXP, SEXP controlSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::colvec>& >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::colvec>& >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type minbound(minboundSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type maxbound(maxboundSEXP);
    Rcpp::traits::input_parameter< const int >::type equation(equationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(curve_fitting_c(xr, yr, minbound, maxbound, equation, control, verbose));
    return rcpp_result_gen;
END_RCPP
}
// curve_fitting_test_c
arma::mat curve_fitting_test_c(const std::vector<arma::colvec>& xr, const std::vector<arma::colvec>& yr, const arma::colvec& minbound, const arma::colvec& maxbound, const int equation, const Rcpp::List& control, bool verbose);
RcppExport SEXP _MetaProfiler_curve_fitting_test_c(SEXP xrSEXP, SEXP yrSEXP, SEXP minboundSEXP, SEXP maxboundSEXP, SEXP equationSEXP, SEXP controlSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<arma::colvec>& >::type xr(xrSEXP);
    Rcpp::traits::input_parameter< const std::vector<arma::colvec>& >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type minbound(minboundSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type maxbound(maxboundSEXP);
    Rcpp::traits::input_parameter< const int >::type equation(equationSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type control(controlSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(curve_fitting_test_c(xr, yr, minbound, maxbound, equation, control, verbose));
    return rcpp_result_gen;
END_RCPP
}
// read_fasta
Rcpp::DataFrame read_fasta(const std::vector<std::string>& files, const std::vector<std::string>& proteins);
RcppExport SEXP _MetaProfiler_read_fasta(SEXP filesSEXP, SEXP proteinsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type files(filesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type proteins(proteinsSEXP);
    rcpp_result_gen = Rcpp::wrap(read_fasta(files, proteins));
    return rcpp_result_gen;
END_RCPP
}
// modify_fasta
void modify_fasta(const std::vector<std::string>& db, const std::vector<std::string>& proteins, std::string filename);
RcppExport SEXP _MetaProfiler_modify_fasta(SEXP dbSEXP, SEXP proteinsSEXP, SEXP filenameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type db(dbSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type proteins(proteinsSEXP);
    Rcpp::traits::input_parameter< std::string >::type filename(filenameSEXP);
    modify_fasta(db, proteins, filename);
    return R_NilValue;
END_RCPP
}
// trypsin_digestion
void trypsin_digestion(const std::vector<std::string>& files, int missed_cleavage, int min_length, int max_length);
RcppExport SEXP _MetaProfiler_trypsin_digestion(SEXP filesSEXP, SEXP missed_cleavageSEXP, SEXP min_lengthSEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type files(filesSEXP);
    Rcpp::traits::input_parameter< int >::type missed_cleavage(missed_cleavageSEXP);
    Rcpp::traits::input_parameter< int >::type min_length(min_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type max_length(max_lengthSEXP);
    trypsin_digestion(files, missed_cleavage, min_length, max_length);
    return R_NilValue;
END_RCPP
}
// qtclust_c
Rcpp::List qtclust_c(arma::mat& m, const int n_groups, arma::uvec& id, arma::mat& groups, arma::vec& radius, Rcpp::StringVector& method, Rcpp::IntegerVector& start, Rcpp::IntegerVector& end, bool element_wise, bool verbose);
RcppExport SEXP _MetaProfiler_qtclust_c(SEXP mSEXP, SEXP n_groupsSEXP, SEXP idSEXP, SEXP groupsSEXP, SEXP radiusSEXP, SEXP methodSEXP, SEXP startSEXP, SEXP endSEXP, SEXP element_wiseSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type n_groups(n_groupsSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type id(idSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector& >::type method(methodSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type start(startSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type end(endSEXP);
    Rcpp::traits::input_parameter< bool >::type element_wise(element_wiseSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(qtclust_c(m, n_groups, id, groups, radius, method, start, end, element_wise, verbose));
    return rcpp_result_gen;
END_RCPP
}
// razor
Rcpp::List razor(std::vector<std::vector<std::string>> x, std::vector<std::string> id, const bool verbose);
RcppExport SEXP _MetaProfiler_razor(SEXP xSEXP, SEXP idSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<std::string>> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type id(idSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(razor(x, id, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MetaProfiler_curve_fitting_c", (DL_FUNC) &_MetaProfiler_curve_fitting_c, 7},
    {"_MetaProfiler_curve_fitting_test_c", (DL_FUNC) &_MetaProfiler_curve_fitting_test_c, 7},
    {"_MetaProfiler_read_fasta", (DL_FUNC) &_MetaProfiler_read_fasta, 2},
    {"_MetaProfiler_modify_fasta", (DL_FUNC) &_MetaProfiler_modify_fasta, 3},
    {"_MetaProfiler_trypsin_digestion", (DL_FUNC) &_MetaProfiler_trypsin_digestion, 4},
    {"_MetaProfiler_qtclust_c", (DL_FUNC) &_MetaProfiler_qtclust_c, 10},
    {"_MetaProfiler_razor", (DL_FUNC) &_MetaProfiler_razor, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_MetaProfiler(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
